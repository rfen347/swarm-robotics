/* Auto-generated by genmsg_cpp for file /home/gary/indigo_workspace/project1/msg/move.msg */
#ifndef PROJECT1_MESSAGE_MOVE_H
#define PROJECT1_MESSAGE_MOVE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace project1
{
template <class ContainerAllocator>
struct move_ {
  typedef move_<ContainerAllocator> Type;

  move_()
  : linear_x(0.0)
  , angular_z(0.0)
  , theta(0.0)
  {
  }

  move_(const ContainerAllocator& _alloc)
  : linear_x(0.0)
  , angular_z(0.0)
  , theta(0.0)
  {
  }

  typedef double _linear_x_type;
  double linear_x;

  typedef double _angular_z_type;
  double angular_z;

  typedef double _theta_type;
  double theta;


  typedef boost::shared_ptr< ::project1::move_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::project1::move_<ContainerAllocator>  const> ConstPtr;
}; // struct move
typedef  ::project1::move_<std::allocator<void> > move;

typedef boost::shared_ptr< ::project1::move> movePtr;
typedef boost::shared_ptr< ::project1::move const> moveConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::project1::move_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::project1::move_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace project1

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::project1::move_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::project1::move_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::project1::move_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0bd4a0d7431b99f184481f96ac4a764a";
  }

  static const char* value(const  ::project1::move_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0bd4a0d7431b99f1ULL;
  static const uint64_t static_value2 = 0x84481f96ac4a764aULL;
};

template<class ContainerAllocator>
struct DataType< ::project1::move_<ContainerAllocator> > {
  static const char* value() 
  {
    return "project1/move";
  }

  static const char* value(const  ::project1::move_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::project1::move_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 linear_x\n\
float64 angular_z\n\
float64 theta\n\
\n\
";
  }

  static const char* value(const  ::project1::move_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::project1::move_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::project1::move_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.linear_x);
    stream.next(m.angular_z);
    stream.next(m.theta);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct move_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::project1::move_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::project1::move_<ContainerAllocator> & v) 
  {
    s << indent << "linear_x: ";
    Printer<double>::stream(s, indent + "  ", v.linear_x);
    s << indent << "angular_z: ";
    Printer<double>::stream(s, indent + "  ", v.angular_z);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PROJECT1_MESSAGE_MOVE_H

